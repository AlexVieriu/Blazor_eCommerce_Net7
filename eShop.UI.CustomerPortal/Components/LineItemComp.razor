@inject IUpdateQuantityUseCase updateQty
@inject IDeleteLineItemUseCase deleteLineItem

@if (LineItem.Product != null)
{
    <div class="card p-3">
        <div class="row text-center">
            <div class="col">
                <img src="@LineItem.Product.ImageLink">
            </div>

            <div class="col text-start">
                <h5>@LineItem.Product.Name</h5>
                <label>Quantity: </label>
                <input type="number" min=0 value=@LineItem.Quantity 
                    @onchange="HandleUpdateQty" class="form-control" />
                <p>Price: &nbsp; @LineItem.Price.ToString("c")</p>
            </div>

            <div class="col position-relative">
                <button class="btn btn-outline-danger position-absolute top-50 start-50 translate-middle col-9"
                @onclick="HandleDeleteLineItem">Delete</button>
            </div>           
        </div>
    </div>
}


@code {
    [Parameter]
    public OrderLineItem LineItem { get; set; }

    [Parameter]
    public EventCallback<Order> OnUpdateQtyItem { get; set; }

    [Parameter]
    public EventCallback<Order> OnDeleteLineItem { get; set; }

    public async void HandleUpdateQty(ChangeEventArgs e)
    {
        int qty;
        var isValue = int.TryParse(e.Value.ToString(), out qty);

        if (isValue)
        {
            Order order;
            order = await updateQty.ExecuteAsync(LineItem.ProductId, qty);
            if (order != null)
                await OnUpdateQtyItem.InvokeAsync(order);
        }
    }

    public async void HandleDeleteLineItem()
    {
        var order = await deleteLineItem.ExecuteAsync(LineItem.ProductId);
        if (order != null)
            await OnDeleteLineItem.InvokeAsync(order);
    }
}